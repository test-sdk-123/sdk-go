/*
Example.com

This is an **example** API to demonstrate features of the OpenAPI specification. # Introduction This API definition is intended to to be a good starting point for describing your API in [OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md). It also demonstrates features of the [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool and the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond the standard OpenAPI syntax, we use a few  [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md). # OpenAPI Specification The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service. 

API version: 1.0.0
Contact: contact@example.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schema{}

// Schema struct for Schema
type Schema struct {
	// Property name's description (type is string)
	StringProperty *string `json:"stringProperty,omitempty"`
	// Notice this only appears in the response.
	ReadOnlyStringProperty *string `json:"readOnlyStringProperty,omitempty"`
	// Notice this only appears in the request.
	WriteOnlyStringProperty *string `json:"writeOnlyStringProperty,omitempty"`
	// Property name's description (type is string)
	MinLengthString *string `json:"minLengthString,omitempty"`
	// Property name's description (type is string)
	MaxLengthString *string `json:"maxLengthString,omitempty"`
	// Property name's description (type is string)
	MinAndMaxLengthString *string `json:"minAndMaxLengthString,omitempty"`
	// Property name's description (type is string or null)
	NullableOrStringProperty NullableString `json:"nullableOrStringProperty,omitempty"`
	// Property name's description (type is string)
	StringEnumValues *string `json:"stringEnumValues,omitempty"`
	// Property name's description (type is string, format is date-time)
	StringDateTime *time.Time `json:"stringDateTime,omitempty"`
	// Property name's description (type is string, format is date-time)
	StringDate *string `json:"stringDate,omitempty"`
	// Property name's description (type is string, format is email)
	StringEmail *string `json:"stringEmail,omitempty"`
	// Property name's description (type is string, format is ipv4 address)
	StringIpAddressV4 *string `json:"stringIpAddressV4,omitempty"`
	// Property name's description (type is string, format is ipv6 address)
	StringIpAddressV6 *string `json:"stringIpAddressV6,omitempty"`
	// Property name's description (type is string, format is password)
	StringPassword *string `json:"stringPassword,omitempty"`
	// Property name's description (type is string, format is hostname)
	StringHostname *string `json:"stringHostname,omitempty"`
	// Property name's description (type is string, format is uri)
	StringUri *string `json:"stringUri,omitempty"`
	// Property name's description (type is string, format is uuid)
	StringUuid *string `json:"stringUuid,omitempty"`
	// Property name's description (type is number)
	NumberProperty *float32 `json:"numberProperty,omitempty"`
	// Property name's description (type is number, format is float)
	NumberFloat *float32 `json:"numberFloat,omitempty"`
	// Property name's description (type is number, format is double)
	NumberDouble *float64 `json:"numberDouble,omitempty"`
	// Property name's description (type is number)
	NumberGreaterThanOrEquals *float32 `json:"numberGreaterThanOrEquals,omitempty"`
	// Property name's description (type is number)
	NumberGreaterThan *float32 `json:"numberGreaterThan,omitempty"`
	// Property name's description (type is number)
	NumberLessThan *float32 `json:"numberLessThan,omitempty"`
	// Property name's description (type is number)
	NumberLessThanOrEquals *float32 `json:"numberLessThanOrEquals,omitempty"`
	// Property name's description (type is number)
	NumberRange *float32 `json:"numberRange,omitempty"`
	// Property name's description (type is number)
	NumberRangeExclusiveMaximum *float32 `json:"numberRangeExclusiveMaximum,omitempty"`
	// Property name's description (type is number)
	NumberRangeExclusiveMinimumAndMaximum *float32 `json:"numberRangeExclusiveMinimumAndMaximum,omitempty"`
	// Property name's description (type is number)
	NumberMultipleOf *float32 `json:"numberMultipleOf,omitempty"`
	// Property name's description (type is integer)
	IntegerType *int32 `json:"integerType,omitempty"`
	// Property name's description (type is integer, format is int32)
	Integer32bit *int32 `json:"integer32bit,omitempty"`
	// Property name's description (type is integer, format is int64)
	Integer64bit *int64 `json:"integer64bit,omitempty"`
	// Property name's description (type is boolean)
	BooleanProperty *bool `json:"booleanProperty,omitempty"`
}

// NewSchema instantiates a new Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchema() *Schema {
	this := Schema{}
	return &this
}

// NewSchemaWithDefaults instantiates a new Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaWithDefaults() *Schema {
	this := Schema{}
	return &this
}

// GetStringProperty returns the StringProperty field value if set, zero value otherwise.
func (o *Schema) GetStringProperty() string {
	if o == nil || IsNil(o.StringProperty) {
		var ret string
		return ret
	}
	return *o.StringProperty
}

// GetStringPropertyOk returns a tuple with the StringProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.StringProperty) {
		return nil, false
	}
	return o.StringProperty, true
}

// HasStringProperty returns a boolean if a field has been set.
func (o *Schema) HasStringProperty() bool {
	if o != nil && !IsNil(o.StringProperty) {
		return true
	}

	return false
}

// SetStringProperty gets a reference to the given string and assigns it to the StringProperty field.
func (o *Schema) SetStringProperty(v string) {
	o.StringProperty = &v
}

// GetReadOnlyStringProperty returns the ReadOnlyStringProperty field value if set, zero value otherwise.
func (o *Schema) GetReadOnlyStringProperty() string {
	if o == nil || IsNil(o.ReadOnlyStringProperty) {
		var ret string
		return ret
	}
	return *o.ReadOnlyStringProperty
}

// GetReadOnlyStringPropertyOk returns a tuple with the ReadOnlyStringProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetReadOnlyStringPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.ReadOnlyStringProperty) {
		return nil, false
	}
	return o.ReadOnlyStringProperty, true
}

// HasReadOnlyStringProperty returns a boolean if a field has been set.
func (o *Schema) HasReadOnlyStringProperty() bool {
	if o != nil && !IsNil(o.ReadOnlyStringProperty) {
		return true
	}

	return false
}

// SetReadOnlyStringProperty gets a reference to the given string and assigns it to the ReadOnlyStringProperty field.
func (o *Schema) SetReadOnlyStringProperty(v string) {
	o.ReadOnlyStringProperty = &v
}

// GetWriteOnlyStringProperty returns the WriteOnlyStringProperty field value if set, zero value otherwise.
func (o *Schema) GetWriteOnlyStringProperty() string {
	if o == nil || IsNil(o.WriteOnlyStringProperty) {
		var ret string
		return ret
	}
	return *o.WriteOnlyStringProperty
}

// GetWriteOnlyStringPropertyOk returns a tuple with the WriteOnlyStringProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetWriteOnlyStringPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.WriteOnlyStringProperty) {
		return nil, false
	}
	return o.WriteOnlyStringProperty, true
}

// HasWriteOnlyStringProperty returns a boolean if a field has been set.
func (o *Schema) HasWriteOnlyStringProperty() bool {
	if o != nil && !IsNil(o.WriteOnlyStringProperty) {
		return true
	}

	return false
}

// SetWriteOnlyStringProperty gets a reference to the given string and assigns it to the WriteOnlyStringProperty field.
func (o *Schema) SetWriteOnlyStringProperty(v string) {
	o.WriteOnlyStringProperty = &v
}

// GetMinLengthString returns the MinLengthString field value if set, zero value otherwise.
func (o *Schema) GetMinLengthString() string {
	if o == nil || IsNil(o.MinLengthString) {
		var ret string
		return ret
	}
	return *o.MinLengthString
}

// GetMinLengthStringOk returns a tuple with the MinLengthString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetMinLengthStringOk() (*string, bool) {
	if o == nil || IsNil(o.MinLengthString) {
		return nil, false
	}
	return o.MinLengthString, true
}

// HasMinLengthString returns a boolean if a field has been set.
func (o *Schema) HasMinLengthString() bool {
	if o != nil && !IsNil(o.MinLengthString) {
		return true
	}

	return false
}

// SetMinLengthString gets a reference to the given string and assigns it to the MinLengthString field.
func (o *Schema) SetMinLengthString(v string) {
	o.MinLengthString = &v
}

// GetMaxLengthString returns the MaxLengthString field value if set, zero value otherwise.
func (o *Schema) GetMaxLengthString() string {
	if o == nil || IsNil(o.MaxLengthString) {
		var ret string
		return ret
	}
	return *o.MaxLengthString
}

// GetMaxLengthStringOk returns a tuple with the MaxLengthString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetMaxLengthStringOk() (*string, bool) {
	if o == nil || IsNil(o.MaxLengthString) {
		return nil, false
	}
	return o.MaxLengthString, true
}

// HasMaxLengthString returns a boolean if a field has been set.
func (o *Schema) HasMaxLengthString() bool {
	if o != nil && !IsNil(o.MaxLengthString) {
		return true
	}

	return false
}

// SetMaxLengthString gets a reference to the given string and assigns it to the MaxLengthString field.
func (o *Schema) SetMaxLengthString(v string) {
	o.MaxLengthString = &v
}

// GetMinAndMaxLengthString returns the MinAndMaxLengthString field value if set, zero value otherwise.
func (o *Schema) GetMinAndMaxLengthString() string {
	if o == nil || IsNil(o.MinAndMaxLengthString) {
		var ret string
		return ret
	}
	return *o.MinAndMaxLengthString
}

// GetMinAndMaxLengthStringOk returns a tuple with the MinAndMaxLengthString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetMinAndMaxLengthStringOk() (*string, bool) {
	if o == nil || IsNil(o.MinAndMaxLengthString) {
		return nil, false
	}
	return o.MinAndMaxLengthString, true
}

// HasMinAndMaxLengthString returns a boolean if a field has been set.
func (o *Schema) HasMinAndMaxLengthString() bool {
	if o != nil && !IsNil(o.MinAndMaxLengthString) {
		return true
	}

	return false
}

// SetMinAndMaxLengthString gets a reference to the given string and assigns it to the MinAndMaxLengthString field.
func (o *Schema) SetMinAndMaxLengthString(v string) {
	o.MinAndMaxLengthString = &v
}

// GetNullableOrStringProperty returns the NullableOrStringProperty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schema) GetNullableOrStringProperty() string {
	if o == nil || IsNil(o.NullableOrStringProperty.Get()) {
		var ret string
		return ret
	}
	return *o.NullableOrStringProperty.Get()
}

// GetNullableOrStringPropertyOk returns a tuple with the NullableOrStringProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schema) GetNullableOrStringPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NullableOrStringProperty.Get(), o.NullableOrStringProperty.IsSet()
}

// HasNullableOrStringProperty returns a boolean if a field has been set.
func (o *Schema) HasNullableOrStringProperty() bool {
	if o != nil && o.NullableOrStringProperty.IsSet() {
		return true
	}

	return false
}

// SetNullableOrStringProperty gets a reference to the given NullableString and assigns it to the NullableOrStringProperty field.
func (o *Schema) SetNullableOrStringProperty(v string) {
	o.NullableOrStringProperty.Set(&v)
}
// SetNullableOrStringPropertyNil sets the value for NullableOrStringProperty to be an explicit nil
func (o *Schema) SetNullableOrStringPropertyNil() {
	o.NullableOrStringProperty.Set(nil)
}

// UnsetNullableOrStringProperty ensures that no value is present for NullableOrStringProperty, not even an explicit nil
func (o *Schema) UnsetNullableOrStringProperty() {
	o.NullableOrStringProperty.Unset()
}

// GetStringEnumValues returns the StringEnumValues field value if set, zero value otherwise.
func (o *Schema) GetStringEnumValues() string {
	if o == nil || IsNil(o.StringEnumValues) {
		var ret string
		return ret
	}
	return *o.StringEnumValues
}

// GetStringEnumValuesOk returns a tuple with the StringEnumValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringEnumValuesOk() (*string, bool) {
	if o == nil || IsNil(o.StringEnumValues) {
		return nil, false
	}
	return o.StringEnumValues, true
}

// HasStringEnumValues returns a boolean if a field has been set.
func (o *Schema) HasStringEnumValues() bool {
	if o != nil && !IsNil(o.StringEnumValues) {
		return true
	}

	return false
}

// SetStringEnumValues gets a reference to the given string and assigns it to the StringEnumValues field.
func (o *Schema) SetStringEnumValues(v string) {
	o.StringEnumValues = &v
}

// GetStringDateTime returns the StringDateTime field value if set, zero value otherwise.
func (o *Schema) GetStringDateTime() time.Time {
	if o == nil || IsNil(o.StringDateTime) {
		var ret time.Time
		return ret
	}
	return *o.StringDateTime
}

// GetStringDateTimeOk returns a tuple with the StringDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StringDateTime) {
		return nil, false
	}
	return o.StringDateTime, true
}

// HasStringDateTime returns a boolean if a field has been set.
func (o *Schema) HasStringDateTime() bool {
	if o != nil && !IsNil(o.StringDateTime) {
		return true
	}

	return false
}

// SetStringDateTime gets a reference to the given time.Time and assigns it to the StringDateTime field.
func (o *Schema) SetStringDateTime(v time.Time) {
	o.StringDateTime = &v
}

// GetStringDate returns the StringDate field value if set, zero value otherwise.
func (o *Schema) GetStringDate() string {
	if o == nil || IsNil(o.StringDate) {
		var ret string
		return ret
	}
	return *o.StringDate
}

// GetStringDateOk returns a tuple with the StringDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringDateOk() (*string, bool) {
	if o == nil || IsNil(o.StringDate) {
		return nil, false
	}
	return o.StringDate, true
}

// HasStringDate returns a boolean if a field has been set.
func (o *Schema) HasStringDate() bool {
	if o != nil && !IsNil(o.StringDate) {
		return true
	}

	return false
}

// SetStringDate gets a reference to the given string and assigns it to the StringDate field.
func (o *Schema) SetStringDate(v string) {
	o.StringDate = &v
}

// GetStringEmail returns the StringEmail field value if set, zero value otherwise.
func (o *Schema) GetStringEmail() string {
	if o == nil || IsNil(o.StringEmail) {
		var ret string
		return ret
	}
	return *o.StringEmail
}

// GetStringEmailOk returns a tuple with the StringEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringEmailOk() (*string, bool) {
	if o == nil || IsNil(o.StringEmail) {
		return nil, false
	}
	return o.StringEmail, true
}

// HasStringEmail returns a boolean if a field has been set.
func (o *Schema) HasStringEmail() bool {
	if o != nil && !IsNil(o.StringEmail) {
		return true
	}

	return false
}

// SetStringEmail gets a reference to the given string and assigns it to the StringEmail field.
func (o *Schema) SetStringEmail(v string) {
	o.StringEmail = &v
}

// GetStringIpAddressV4 returns the StringIpAddressV4 field value if set, zero value otherwise.
func (o *Schema) GetStringIpAddressV4() string {
	if o == nil || IsNil(o.StringIpAddressV4) {
		var ret string
		return ret
	}
	return *o.StringIpAddressV4
}

// GetStringIpAddressV4Ok returns a tuple with the StringIpAddressV4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringIpAddressV4Ok() (*string, bool) {
	if o == nil || IsNil(o.StringIpAddressV4) {
		return nil, false
	}
	return o.StringIpAddressV4, true
}

// HasStringIpAddressV4 returns a boolean if a field has been set.
func (o *Schema) HasStringIpAddressV4() bool {
	if o != nil && !IsNil(o.StringIpAddressV4) {
		return true
	}

	return false
}

// SetStringIpAddressV4 gets a reference to the given string and assigns it to the StringIpAddressV4 field.
func (o *Schema) SetStringIpAddressV4(v string) {
	o.StringIpAddressV4 = &v
}

// GetStringIpAddressV6 returns the StringIpAddressV6 field value if set, zero value otherwise.
func (o *Schema) GetStringIpAddressV6() string {
	if o == nil || IsNil(o.StringIpAddressV6) {
		var ret string
		return ret
	}
	return *o.StringIpAddressV6
}

// GetStringIpAddressV6Ok returns a tuple with the StringIpAddressV6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringIpAddressV6Ok() (*string, bool) {
	if o == nil || IsNil(o.StringIpAddressV6) {
		return nil, false
	}
	return o.StringIpAddressV6, true
}

// HasStringIpAddressV6 returns a boolean if a field has been set.
func (o *Schema) HasStringIpAddressV6() bool {
	if o != nil && !IsNil(o.StringIpAddressV6) {
		return true
	}

	return false
}

// SetStringIpAddressV6 gets a reference to the given string and assigns it to the StringIpAddressV6 field.
func (o *Schema) SetStringIpAddressV6(v string) {
	o.StringIpAddressV6 = &v
}

// GetStringPassword returns the StringPassword field value if set, zero value otherwise.
func (o *Schema) GetStringPassword() string {
	if o == nil || IsNil(o.StringPassword) {
		var ret string
		return ret
	}
	return *o.StringPassword
}

// GetStringPasswordOk returns a tuple with the StringPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.StringPassword) {
		return nil, false
	}
	return o.StringPassword, true
}

// HasStringPassword returns a boolean if a field has been set.
func (o *Schema) HasStringPassword() bool {
	if o != nil && !IsNil(o.StringPassword) {
		return true
	}

	return false
}

// SetStringPassword gets a reference to the given string and assigns it to the StringPassword field.
func (o *Schema) SetStringPassword(v string) {
	o.StringPassword = &v
}

// GetStringHostname returns the StringHostname field value if set, zero value otherwise.
func (o *Schema) GetStringHostname() string {
	if o == nil || IsNil(o.StringHostname) {
		var ret string
		return ret
	}
	return *o.StringHostname
}

// GetStringHostnameOk returns a tuple with the StringHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.StringHostname) {
		return nil, false
	}
	return o.StringHostname, true
}

// HasStringHostname returns a boolean if a field has been set.
func (o *Schema) HasStringHostname() bool {
	if o != nil && !IsNil(o.StringHostname) {
		return true
	}

	return false
}

// SetStringHostname gets a reference to the given string and assigns it to the StringHostname field.
func (o *Schema) SetStringHostname(v string) {
	o.StringHostname = &v
}

// GetStringUri returns the StringUri field value if set, zero value otherwise.
func (o *Schema) GetStringUri() string {
	if o == nil || IsNil(o.StringUri) {
		var ret string
		return ret
	}
	return *o.StringUri
}

// GetStringUriOk returns a tuple with the StringUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringUriOk() (*string, bool) {
	if o == nil || IsNil(o.StringUri) {
		return nil, false
	}
	return o.StringUri, true
}

// HasStringUri returns a boolean if a field has been set.
func (o *Schema) HasStringUri() bool {
	if o != nil && !IsNil(o.StringUri) {
		return true
	}

	return false
}

// SetStringUri gets a reference to the given string and assigns it to the StringUri field.
func (o *Schema) SetStringUri(v string) {
	o.StringUri = &v
}

// GetStringUuid returns the StringUuid field value if set, zero value otherwise.
func (o *Schema) GetStringUuid() string {
	if o == nil || IsNil(o.StringUuid) {
		var ret string
		return ret
	}
	return *o.StringUuid
}

// GetStringUuidOk returns a tuple with the StringUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetStringUuidOk() (*string, bool) {
	if o == nil || IsNil(o.StringUuid) {
		return nil, false
	}
	return o.StringUuid, true
}

// HasStringUuid returns a boolean if a field has been set.
func (o *Schema) HasStringUuid() bool {
	if o != nil && !IsNil(o.StringUuid) {
		return true
	}

	return false
}

// SetStringUuid gets a reference to the given string and assigns it to the StringUuid field.
func (o *Schema) SetStringUuid(v string) {
	o.StringUuid = &v
}

// GetNumberProperty returns the NumberProperty field value if set, zero value otherwise.
func (o *Schema) GetNumberProperty() float32 {
	if o == nil || IsNil(o.NumberProperty) {
		var ret float32
		return ret
	}
	return *o.NumberProperty
}

// GetNumberPropertyOk returns a tuple with the NumberProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberPropertyOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberProperty) {
		return nil, false
	}
	return o.NumberProperty, true
}

// HasNumberProperty returns a boolean if a field has been set.
func (o *Schema) HasNumberProperty() bool {
	if o != nil && !IsNil(o.NumberProperty) {
		return true
	}

	return false
}

// SetNumberProperty gets a reference to the given float32 and assigns it to the NumberProperty field.
func (o *Schema) SetNumberProperty(v float32) {
	o.NumberProperty = &v
}

// GetNumberFloat returns the NumberFloat field value if set, zero value otherwise.
func (o *Schema) GetNumberFloat() float32 {
	if o == nil || IsNil(o.NumberFloat) {
		var ret float32
		return ret
	}
	return *o.NumberFloat
}

// GetNumberFloatOk returns a tuple with the NumberFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberFloatOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberFloat) {
		return nil, false
	}
	return o.NumberFloat, true
}

// HasNumberFloat returns a boolean if a field has been set.
func (o *Schema) HasNumberFloat() bool {
	if o != nil && !IsNil(o.NumberFloat) {
		return true
	}

	return false
}

// SetNumberFloat gets a reference to the given float32 and assigns it to the NumberFloat field.
func (o *Schema) SetNumberFloat(v float32) {
	o.NumberFloat = &v
}

// GetNumberDouble returns the NumberDouble field value if set, zero value otherwise.
func (o *Schema) GetNumberDouble() float64 {
	if o == nil || IsNil(o.NumberDouble) {
		var ret float64
		return ret
	}
	return *o.NumberDouble
}

// GetNumberDoubleOk returns a tuple with the NumberDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberDoubleOk() (*float64, bool) {
	if o == nil || IsNil(o.NumberDouble) {
		return nil, false
	}
	return o.NumberDouble, true
}

// HasNumberDouble returns a boolean if a field has been set.
func (o *Schema) HasNumberDouble() bool {
	if o != nil && !IsNil(o.NumberDouble) {
		return true
	}

	return false
}

// SetNumberDouble gets a reference to the given float64 and assigns it to the NumberDouble field.
func (o *Schema) SetNumberDouble(v float64) {
	o.NumberDouble = &v
}

// GetNumberGreaterThanOrEquals returns the NumberGreaterThanOrEquals field value if set, zero value otherwise.
func (o *Schema) GetNumberGreaterThanOrEquals() float32 {
	if o == nil || IsNil(o.NumberGreaterThanOrEquals) {
		var ret float32
		return ret
	}
	return *o.NumberGreaterThanOrEquals
}

// GetNumberGreaterThanOrEqualsOk returns a tuple with the NumberGreaterThanOrEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberGreaterThanOrEqualsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberGreaterThanOrEquals) {
		return nil, false
	}
	return o.NumberGreaterThanOrEquals, true
}

// HasNumberGreaterThanOrEquals returns a boolean if a field has been set.
func (o *Schema) HasNumberGreaterThanOrEquals() bool {
	if o != nil && !IsNil(o.NumberGreaterThanOrEquals) {
		return true
	}

	return false
}

// SetNumberGreaterThanOrEquals gets a reference to the given float32 and assigns it to the NumberGreaterThanOrEquals field.
func (o *Schema) SetNumberGreaterThanOrEquals(v float32) {
	o.NumberGreaterThanOrEquals = &v
}

// GetNumberGreaterThan returns the NumberGreaterThan field value if set, zero value otherwise.
func (o *Schema) GetNumberGreaterThan() float32 {
	if o == nil || IsNil(o.NumberGreaterThan) {
		var ret float32
		return ret
	}
	return *o.NumberGreaterThan
}

// GetNumberGreaterThanOk returns a tuple with the NumberGreaterThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberGreaterThanOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberGreaterThan) {
		return nil, false
	}
	return o.NumberGreaterThan, true
}

// HasNumberGreaterThan returns a boolean if a field has been set.
func (o *Schema) HasNumberGreaterThan() bool {
	if o != nil && !IsNil(o.NumberGreaterThan) {
		return true
	}

	return false
}

// SetNumberGreaterThan gets a reference to the given float32 and assigns it to the NumberGreaterThan field.
func (o *Schema) SetNumberGreaterThan(v float32) {
	o.NumberGreaterThan = &v
}

// GetNumberLessThan returns the NumberLessThan field value if set, zero value otherwise.
func (o *Schema) GetNumberLessThan() float32 {
	if o == nil || IsNil(o.NumberLessThan) {
		var ret float32
		return ret
	}
	return *o.NumberLessThan
}

// GetNumberLessThanOk returns a tuple with the NumberLessThan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberLessThanOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberLessThan) {
		return nil, false
	}
	return o.NumberLessThan, true
}

// HasNumberLessThan returns a boolean if a field has been set.
func (o *Schema) HasNumberLessThan() bool {
	if o != nil && !IsNil(o.NumberLessThan) {
		return true
	}

	return false
}

// SetNumberLessThan gets a reference to the given float32 and assigns it to the NumberLessThan field.
func (o *Schema) SetNumberLessThan(v float32) {
	o.NumberLessThan = &v
}

// GetNumberLessThanOrEquals returns the NumberLessThanOrEquals field value if set, zero value otherwise.
func (o *Schema) GetNumberLessThanOrEquals() float32 {
	if o == nil || IsNil(o.NumberLessThanOrEquals) {
		var ret float32
		return ret
	}
	return *o.NumberLessThanOrEquals
}

// GetNumberLessThanOrEqualsOk returns a tuple with the NumberLessThanOrEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberLessThanOrEqualsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberLessThanOrEquals) {
		return nil, false
	}
	return o.NumberLessThanOrEquals, true
}

// HasNumberLessThanOrEquals returns a boolean if a field has been set.
func (o *Schema) HasNumberLessThanOrEquals() bool {
	if o != nil && !IsNil(o.NumberLessThanOrEquals) {
		return true
	}

	return false
}

// SetNumberLessThanOrEquals gets a reference to the given float32 and assigns it to the NumberLessThanOrEquals field.
func (o *Schema) SetNumberLessThanOrEquals(v float32) {
	o.NumberLessThanOrEquals = &v
}

// GetNumberRange returns the NumberRange field value if set, zero value otherwise.
func (o *Schema) GetNumberRange() float32 {
	if o == nil || IsNil(o.NumberRange) {
		var ret float32
		return ret
	}
	return *o.NumberRange
}

// GetNumberRangeOk returns a tuple with the NumberRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberRangeOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberRange) {
		return nil, false
	}
	return o.NumberRange, true
}

// HasNumberRange returns a boolean if a field has been set.
func (o *Schema) HasNumberRange() bool {
	if o != nil && !IsNil(o.NumberRange) {
		return true
	}

	return false
}

// SetNumberRange gets a reference to the given float32 and assigns it to the NumberRange field.
func (o *Schema) SetNumberRange(v float32) {
	o.NumberRange = &v
}

// GetNumberRangeExclusiveMaximum returns the NumberRangeExclusiveMaximum field value if set, zero value otherwise.
func (o *Schema) GetNumberRangeExclusiveMaximum() float32 {
	if o == nil || IsNil(o.NumberRangeExclusiveMaximum) {
		var ret float32
		return ret
	}
	return *o.NumberRangeExclusiveMaximum
}

// GetNumberRangeExclusiveMaximumOk returns a tuple with the NumberRangeExclusiveMaximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberRangeExclusiveMaximumOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberRangeExclusiveMaximum) {
		return nil, false
	}
	return o.NumberRangeExclusiveMaximum, true
}

// HasNumberRangeExclusiveMaximum returns a boolean if a field has been set.
func (o *Schema) HasNumberRangeExclusiveMaximum() bool {
	if o != nil && !IsNil(o.NumberRangeExclusiveMaximum) {
		return true
	}

	return false
}

// SetNumberRangeExclusiveMaximum gets a reference to the given float32 and assigns it to the NumberRangeExclusiveMaximum field.
func (o *Schema) SetNumberRangeExclusiveMaximum(v float32) {
	o.NumberRangeExclusiveMaximum = &v
}

// GetNumberRangeExclusiveMinimumAndMaximum returns the NumberRangeExclusiveMinimumAndMaximum field value if set, zero value otherwise.
func (o *Schema) GetNumberRangeExclusiveMinimumAndMaximum() float32 {
	if o == nil || IsNil(o.NumberRangeExclusiveMinimumAndMaximum) {
		var ret float32
		return ret
	}
	return *o.NumberRangeExclusiveMinimumAndMaximum
}

// GetNumberRangeExclusiveMinimumAndMaximumOk returns a tuple with the NumberRangeExclusiveMinimumAndMaximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberRangeExclusiveMinimumAndMaximumOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberRangeExclusiveMinimumAndMaximum) {
		return nil, false
	}
	return o.NumberRangeExclusiveMinimumAndMaximum, true
}

// HasNumberRangeExclusiveMinimumAndMaximum returns a boolean if a field has been set.
func (o *Schema) HasNumberRangeExclusiveMinimumAndMaximum() bool {
	if o != nil && !IsNil(o.NumberRangeExclusiveMinimumAndMaximum) {
		return true
	}

	return false
}

// SetNumberRangeExclusiveMinimumAndMaximum gets a reference to the given float32 and assigns it to the NumberRangeExclusiveMinimumAndMaximum field.
func (o *Schema) SetNumberRangeExclusiveMinimumAndMaximum(v float32) {
	o.NumberRangeExclusiveMinimumAndMaximum = &v
}

// GetNumberMultipleOf returns the NumberMultipleOf field value if set, zero value otherwise.
func (o *Schema) GetNumberMultipleOf() float32 {
	if o == nil || IsNil(o.NumberMultipleOf) {
		var ret float32
		return ret
	}
	return *o.NumberMultipleOf
}

// GetNumberMultipleOfOk returns a tuple with the NumberMultipleOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetNumberMultipleOfOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberMultipleOf) {
		return nil, false
	}
	return o.NumberMultipleOf, true
}

// HasNumberMultipleOf returns a boolean if a field has been set.
func (o *Schema) HasNumberMultipleOf() bool {
	if o != nil && !IsNil(o.NumberMultipleOf) {
		return true
	}

	return false
}

// SetNumberMultipleOf gets a reference to the given float32 and assigns it to the NumberMultipleOf field.
func (o *Schema) SetNumberMultipleOf(v float32) {
	o.NumberMultipleOf = &v
}

// GetIntegerType returns the IntegerType field value if set, zero value otherwise.
func (o *Schema) GetIntegerType() int32 {
	if o == nil || IsNil(o.IntegerType) {
		var ret int32
		return ret
	}
	return *o.IntegerType
}

// GetIntegerTypeOk returns a tuple with the IntegerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetIntegerTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.IntegerType) {
		return nil, false
	}
	return o.IntegerType, true
}

// HasIntegerType returns a boolean if a field has been set.
func (o *Schema) HasIntegerType() bool {
	if o != nil && !IsNil(o.IntegerType) {
		return true
	}

	return false
}

// SetIntegerType gets a reference to the given int32 and assigns it to the IntegerType field.
func (o *Schema) SetIntegerType(v int32) {
	o.IntegerType = &v
}

// GetInteger32bit returns the Integer32bit field value if set, zero value otherwise.
func (o *Schema) GetInteger32bit() int32 {
	if o == nil || IsNil(o.Integer32bit) {
		var ret int32
		return ret
	}
	return *o.Integer32bit
}

// GetInteger32bitOk returns a tuple with the Integer32bit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetInteger32bitOk() (*int32, bool) {
	if o == nil || IsNil(o.Integer32bit) {
		return nil, false
	}
	return o.Integer32bit, true
}

// HasInteger32bit returns a boolean if a field has been set.
func (o *Schema) HasInteger32bit() bool {
	if o != nil && !IsNil(o.Integer32bit) {
		return true
	}

	return false
}

// SetInteger32bit gets a reference to the given int32 and assigns it to the Integer32bit field.
func (o *Schema) SetInteger32bit(v int32) {
	o.Integer32bit = &v
}

// GetInteger64bit returns the Integer64bit field value if set, zero value otherwise.
func (o *Schema) GetInteger64bit() int64 {
	if o == nil || IsNil(o.Integer64bit) {
		var ret int64
		return ret
	}
	return *o.Integer64bit
}

// GetInteger64bitOk returns a tuple with the Integer64bit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetInteger64bitOk() (*int64, bool) {
	if o == nil || IsNil(o.Integer64bit) {
		return nil, false
	}
	return o.Integer64bit, true
}

// HasInteger64bit returns a boolean if a field has been set.
func (o *Schema) HasInteger64bit() bool {
	if o != nil && !IsNil(o.Integer64bit) {
		return true
	}

	return false
}

// SetInteger64bit gets a reference to the given int64 and assigns it to the Integer64bit field.
func (o *Schema) SetInteger64bit(v int64) {
	o.Integer64bit = &v
}

// GetBooleanProperty returns the BooleanProperty field value if set, zero value otherwise.
func (o *Schema) GetBooleanProperty() bool {
	if o == nil || IsNil(o.BooleanProperty) {
		var ret bool
		return ret
	}
	return *o.BooleanProperty
}

// GetBooleanPropertyOk returns a tuple with the BooleanProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schema) GetBooleanPropertyOk() (*bool, bool) {
	if o == nil || IsNil(o.BooleanProperty) {
		return nil, false
	}
	return o.BooleanProperty, true
}

// HasBooleanProperty returns a boolean if a field has been set.
func (o *Schema) HasBooleanProperty() bool {
	if o != nil && !IsNil(o.BooleanProperty) {
		return true
	}

	return false
}

// SetBooleanProperty gets a reference to the given bool and assigns it to the BooleanProperty field.
func (o *Schema) SetBooleanProperty(v bool) {
	o.BooleanProperty = &v
}

func (o Schema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StringProperty) {
		toSerialize["stringProperty"] = o.StringProperty
	}
	if !IsNil(o.ReadOnlyStringProperty) {
		toSerialize["readOnlyStringProperty"] = o.ReadOnlyStringProperty
	}
	if !IsNil(o.WriteOnlyStringProperty) {
		toSerialize["writeOnlyStringProperty"] = o.WriteOnlyStringProperty
	}
	if !IsNil(o.MinLengthString) {
		toSerialize["minLengthString"] = o.MinLengthString
	}
	if !IsNil(o.MaxLengthString) {
		toSerialize["maxLengthString"] = o.MaxLengthString
	}
	if !IsNil(o.MinAndMaxLengthString) {
		toSerialize["minAndMaxLengthString"] = o.MinAndMaxLengthString
	}
	if o.NullableOrStringProperty.IsSet() {
		toSerialize["nullableOrStringProperty"] = o.NullableOrStringProperty.Get()
	}
	if !IsNil(o.StringEnumValues) {
		toSerialize["stringEnumValues"] = o.StringEnumValues
	}
	if !IsNil(o.StringDateTime) {
		toSerialize["stringDateTime"] = o.StringDateTime
	}
	if !IsNil(o.StringDate) {
		toSerialize["stringDate"] = o.StringDate
	}
	if !IsNil(o.StringEmail) {
		toSerialize["stringEmail"] = o.StringEmail
	}
	if !IsNil(o.StringIpAddressV4) {
		toSerialize["stringIpAddressV4"] = o.StringIpAddressV4
	}
	if !IsNil(o.StringIpAddressV6) {
		toSerialize["stringIpAddressV6"] = o.StringIpAddressV6
	}
	if !IsNil(o.StringPassword) {
		toSerialize["stringPassword"] = o.StringPassword
	}
	if !IsNil(o.StringHostname) {
		toSerialize["stringHostname"] = o.StringHostname
	}
	if !IsNil(o.StringUri) {
		toSerialize["stringUri"] = o.StringUri
	}
	if !IsNil(o.StringUuid) {
		toSerialize["stringUuid"] = o.StringUuid
	}
	if !IsNil(o.NumberProperty) {
		toSerialize["numberProperty"] = o.NumberProperty
	}
	if !IsNil(o.NumberFloat) {
		toSerialize["numberFloat"] = o.NumberFloat
	}
	if !IsNil(o.NumberDouble) {
		toSerialize["numberDouble"] = o.NumberDouble
	}
	if !IsNil(o.NumberGreaterThanOrEquals) {
		toSerialize["numberGreaterThanOrEquals"] = o.NumberGreaterThanOrEquals
	}
	if !IsNil(o.NumberGreaterThan) {
		toSerialize["numberGreaterThan"] = o.NumberGreaterThan
	}
	if !IsNil(o.NumberLessThan) {
		toSerialize["numberLessThan"] = o.NumberLessThan
	}
	if !IsNil(o.NumberLessThanOrEquals) {
		toSerialize["numberLessThanOrEquals"] = o.NumberLessThanOrEquals
	}
	if !IsNil(o.NumberRange) {
		toSerialize["numberRange"] = o.NumberRange
	}
	if !IsNil(o.NumberRangeExclusiveMaximum) {
		toSerialize["numberRangeExclusiveMaximum"] = o.NumberRangeExclusiveMaximum
	}
	if !IsNil(o.NumberRangeExclusiveMinimumAndMaximum) {
		toSerialize["numberRangeExclusiveMinimumAndMaximum"] = o.NumberRangeExclusiveMinimumAndMaximum
	}
	if !IsNil(o.NumberMultipleOf) {
		toSerialize["numberMultipleOf"] = o.NumberMultipleOf
	}
	if !IsNil(o.IntegerType) {
		toSerialize["integerType"] = o.IntegerType
	}
	if !IsNil(o.Integer32bit) {
		toSerialize["integer32bit"] = o.Integer32bit
	}
	if !IsNil(o.Integer64bit) {
		toSerialize["integer64bit"] = o.Integer64bit
	}
	if !IsNil(o.BooleanProperty) {
		toSerialize["booleanProperty"] = o.BooleanProperty
	}
	return toSerialize, nil
}

type NullableSchema struct {
	value *Schema
	isSet bool
}

func (v NullableSchema) Get() *Schema {
	return v.value
}

func (v *NullableSchema) Set(val *Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchema(val *Schema) *NullableSchema {
	return &NullableSchema{value: val, isSet: true}
}

func (v NullableSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


